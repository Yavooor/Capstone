version: 2.1
orbs:
  python: circleci/python@1.5.0
  aws-eks: circleci/aws-eks@<<pipeline.parameters.dev-orb-version>>
  kubernetes: circleci/kubernetes@1.3

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.11.3
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Make
          command: |
            python3 -m venv venv
            . venv/bin/activate && make install
      - run:
          name: Lint with pylint and hadolint
          command: . venv/bin/activate && make lint
          
  DeployDocker:
    docker:  
      - image: cimg/base:2022.06
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build Tag and Push Docker
          command: chmod 755 run_docker.sh && ./run_docker.sh
          
  test-cluster:
      docker:
        - image: cimg/python:3.10
      parameters:
        cluster-name:
          description: |
            capstone
          type: string
      steps:
        - kubernetes/install:
            kubectl-version: v1.22.0
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: capstone
        - run:
            command: |
              kubectl get services
            name: Test cluster
          
          
  Kubes:
    docker:  
      - image: cimg/python:3.11.3
    steps:
      - checkout
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
            chmod +x ./kubectl && \
            sudo mv ./kubectl /usr/local/bin/kubectl && \
            kubectl version --client
      - run:
          name: run kubernetes
          command: chmod 755 run_kubernetes.sh && ./run_kubernetes.sh
          
  CheckConnection: 
    docker:  
      - image: circleci/python:3.6.7-stretch
    steps:
      - checkout
      - run:
          name: Check connection
          command: curl localhost:8080
          
  Cleanup: 
    docker:  
      - image: cimg/base:2022.06
    steps:
      - checkout
      - run:
          name: Cleanup
          command: docker system prune -f
      
workflows:
  WFlow: 
    jobs:
      - build-and-test 
      - DeployDocker:
          requires: [build-and-test]
      - aws-eks/create-cluster:
          cluster-name: capstone
      - test-cluster:
          cluster-name: capstone
          requires:
            - aws-eks/create-cluster
      - aws-eks/delete-cluster:
          cluster-name: my-eks-demo
          requires:
            - test-cluster
      - Kubes:
          requires: [CreateEKSCluster]
      - CheckConnection:
          requires: [Kubes]
      - Cleanup:
          requires: [CheckConnection]
